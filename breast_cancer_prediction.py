# -*- coding: utf-8 -*-
"""Breast_Cancer_Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/Rita63/cf9991804f265a0f5cdb9319243eff75/breast_cancer_prediction.ipynb
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report,confusion_matrix
from sklearn.ensemble import AdaBoostClassifier

from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"
import warnings
warnings.filterwarnings('ignore')

from google.colab import drive
drive.mount("/content/gdrive")

df = pd.read_csv('/content/drive/MyDrive/datasets/breast-cancer-data.csv')

df.head()

df.describe

data = data.drop(["Unnamed: 32","id"],axis=1

df.head()

df['diagnosis']

df.shape

y = pd.get_dummies(df['diagnosis'])

y

df.diagnosis[df.diagnosis=='M'] = 1 #Cancer
df.diagnosis[df.diagnosis=='B'] = 0

df['diagnosis']

target = df['diagnosis'].astype('int8')

target.head()

features = df.iloc[:,1:]

features.head()

xtrain,xtest,ytrain,ytest = train_test_split(features,
 target,
 test_size=0.25,
random_state=40)

len(xtest)

MinMax = MinMaxScaler()

scaled = StandardScaler()

xtrain_minmax = MinMax.fit_transform(xtrain)

xtest_minmax = MinMax.transform(xtest)

xtrain_scaled = scaled.fit_transform(xtrain)
xtest_scaled = scaled.transform(xtest)

print(len(xtrain), len(ytrain), len(xtest), len(ytest) )

clf = RandomForestClassifier(n_estimators=5,max_depth=10,random_state=0)

clf.fit(xtrain_scaled,ytrain)

clf.score(xtest_scaled,ytest)

clf_pred = clf.predict(xtest_scaled)

clf_pred

ytest

print(classification_report(ytest,clf_pred))

print(confusion_matrix(ytest,clf_pred))

log = LogisticRegression()

log.fit(xtrain_scaled,ytrain)

log.score(xtest_scaled,ytest)

log_pred = log.predict(xtest)

log_pred

print(confusion_matrix(ytest,log_pred))

"""print(confusion_matrix(ytest,clf_pred))
#True positive false Positive ...... 98
#false Negative true Negative ......45
#actual result
98 ..... normal
45 ..... abnormal
#predicted result
TP - 91 , FP - 7 .....type 1 error
FN - 4 ...type 2 error , TN - 41
"""

print(classification_report(ytest,log_pred))

#### CROSS VALIDATION

from sklearn.model_selection import cross_val_score

print(cross_val_score(clf,features,target,cv=10,scoring='accuracy'))

############## APPLYING PC.........................DIMENSIONALITY REDUCTION TECHNIQUE(WE APPLIED THIS WHERE CO-RELATION IS MORE BW COLUMNS)

xtrain_scaled.shape

from sklearn.decomposition import PCA

"""**WITH THIS COLUMN WILL REDUCE 30 TO 15**

```


"""

pca = PCA(n_components=15)

pca.fit(xtrain_scaled)

x_pca = pca.transform(xtrain_scaled)

x_pca.shape

### LABEL ENCODER

from sklearn.preprocessing import LabelEncoder

log.fit(x_pca,ytrain)

log.score(x_pca,ytrain)

x_pca_test= pca.transform(xtest_scaled)

log.fit(x_pca_test,ytest)

log.score(x_pca_test,ytest)

pred= log.predict(x_pca_test)

pred

print(confusion_matrix(ytest,pred))

print(classification_report(ytest,pred))



result = pd.DataFrame({"Actual price":ytest,"Predicted price":pred})

result

result.to_csv("breast-cancer.csv",index=False) #to save result in csv file